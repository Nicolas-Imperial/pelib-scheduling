/*
 Copyright 2015 Nicolas Melot

 This file is part of Pelib.

 Pelib is free software: you can redistribute it and/or modify
 it under the terms of the GNU General Public License as published by
 the Free Software Foundation, either version 3 of the License, or
 (at your option) any later version.

 Pelib is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 GNU General Public License for more details.

 You should have received a copy of the GNU General Public License
 along with Pelib. If not, see <http://www.gnu.org/licenses/>.
*/


#include <iostream>
#include <cstdlib>
#include <fstream>
#include <string>
#include <boost/regex.hpp>
#include <iomanip>

#include <pelib/AlgebraParser.hpp>
#include <pelib/AlgebraOutput.hpp>
#include <pelib/CppDataOutput.hpp>
#include <pelib/CppData.hpp>

#ifndef PELIB_CPP
#define PELIB_CPP

namespace pelib
{
	/** C++ code generator for a collection of class instances derived from pelib::AlgebraData **/
	class Cpp: public AlgebraOutput
	{
		public:
			/** Constructor
				@param output All data structure generators
			**/
			Cpp(std::vector<CppData*> outputs);
			/** Copy constructor **/
			Cpp(const Cpp &src);
			/** Constructor **/
			Cpp();
			/** Constructor
				@param name Name of the C++ function to generate
			**/
			Cpp(const std::string& name);

			/** Destructor **/
			virtual
			~Cpp();

			/** Sets the name of teh function generated by this output class instance **/
			virtual
			void
			setName(const std::string &name);

			/** Gets the name of the C++ function code generated by this output class instance **/
			virtual
			std::string
			getName() const;
			
			/** Generates C++ code that instanciates all AlgebraData instances in a given Algebra collection, to some C++ function code and writes it in output stream **/
			virtual
			void
			dump(std::ostream& o, const Algebra &record) const;

			/** Generates C++ code that instanciates all AlgebraData instances in a given Algebra collection, to some C++ function code and writes it in output stream **/
			virtual
			void
			dump(std::ostream& o, const AlgebraData *data) const;

			/** Assignment operator. Flushes all output classes contained before receiving the ones from the Cpp output class assigned **/
			virtual
			Cpp&
			operator=(const Cpp &rhs);

		protected:
			//std::vector<CppParser*> outputs;
			std::vector<CppData*> outputs;
			std::string name;

			void
			deleteOutputs();

			void
			addOutputs();
			
		private:
	};
}

#endif
