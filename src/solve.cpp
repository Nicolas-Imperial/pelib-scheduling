/*
 Copyright 2015 Nicolas Melot

 This file is part of Pelib.

 Pelib is free software: you can redistribute it and/or modify
 it under the terms of the GNU General Public License as published by
 the Free Software Foundation, either version 3 of the License, or
 (at your option) any later version.

 Pelib is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 GNU General Public License for more details.

 You should have received a copy of the GNU General Public License
 along with Pelib. If not, see <http://www.gnu.org/licenses/>.
*/


#include <iostream>
#include <cstdlib>
#include <vector>
#include <map>

#include <pelib/Algebra.hpp>
#include <pelib/PelibException.hpp>

#include <pelib/process.h>
#include <pelib/argument_parsing.hpp>
#include <pelib/dl.h>

#ifdef debug
#undef debug
#endif

#define debug(expr) cerr << "[" << __FILE__ << ":" << __FUNCTION__ << ":" << __LINE__ << "] " << #expr << " = \"" << expr << "\"." << endl;

using namespace std;
using namespace pelib;

#ifdef __cplusplus
extern "C" {
#endif

// TODO: find a way to use libdl to invoke the library that created the object
char *library;

std::map<string, pelib::Record*>
pelib_process(const std::map<string, pelib::Record*> &records, size_t argc, char** argv)
{
	pelib_argument_stream_t conversion;
	pelib_argument_stream_init(&conversion);
	pelib_argument_stream_parse(argv, &conversion);

	if(conversion.library == NULL)
	{
		cerr << "[ERROR] No scheduler specified. Aborting" << endl;
		return map<string, Record*>();
	}

	// Load library
	library = conversion.library;
	void *libSolver = load_lib(library);
	Algebra* (*solve)(const map<string, const Algebra> &data, size_t argc, char **argv) = (Algebra* (*)(const map<string, const Algebra> &data, size_t argc, char **argv))load_function(libSolver, "pelib_calculus");

	// Read input data
	map<string, const Algebra> input;
	for(map<string, Record*>::const_iterator i = records.begin(); i != records.end(); i++)
	{
		Record *data = i->second;

		// Add only Algebra records
		if(string(typeid(*data).name()).compare(string(typeid(Algebra).name())) == 0)
		{
			input.insert(pair<string, Algebra>(string(i->first), Algebra(*(Algebra*)i->second)));
		}
	}

	// Prepare output collection and fill it with schedule generated by library
	map<string, Record*> output;
	Algebra *solution = solve(input, conversion.argc, conversion.argv);
	if(solution != NULL)
	{
		output.insert(pair<string, pelib::Record*>(typeid(Algebra).name(), solution));
	}
	else
	{
		throw PelibException("Solver couldn't find a correct solution");
	}

	destroy_lib(libSolver);

	return output;
}

void
pelib_delete(pelib::Record* obj)
{
	void *libSolver = load_lib(library);
	void (*del)(const Algebra*) = (void (*)(const Algebra*))load_function(libSolver, "pelib_delete");

	if(string(typeid(Algebra).name()).compare(typeid(*obj).name()) == 0)
	{
		del((Algebra*)obj);
	}
	else
	{
		delete obj;
	}
}

#ifdef __cplusplus
}
#endif

