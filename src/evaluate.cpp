/*
 Copyright 2015 Nicolas Melot

 This file is part of Pelib.

 Pelib is free software: you can redistribute it and/or modify
 it under the terms of the GNU General Public License as published by
 the Free Software Foundation, either version 3 of the License, or
 (at your option) any later version.

 Pelib is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 GNU General Public License for more details.

 You should have received a copy of the GNU General Public License
 along with Pelib. If not, see <http://www.gnu.org/licenses/>.
*/


#include <iostream>
#include <cstdlib>
#include <vector>
#include <map>

#include <pelib/PowerReport.hpp>
#include <pelib/PowerEvaluator.hpp>
#include <pelib/Schedule.hpp>
#include <pelib/PelibException.hpp>

#include <pelib/argument_parsing.hpp>
#include <pelib/dl.h>

#ifdef debug
#undef debug
#endif

#define debug(expr) cerr << "[" << __FILE__ << ":" << __FUNCTION__ << ":" << __LINE__ << "] " << #expr << " = \"" << expr << "\"." << endl;

using namespace std;
using namespace pelib;

#ifdef __cplusplus
extern "C" {
#endif

struct args
{
	bool showDescription;
	bool showStatsOut;
	bool showStatsErr;
	char* showStatsFile;
	pelib_argument_stream lib;
	string schedule;
	string name;
};
typedef struct args args_t;

static
args_t
parse(char** arg)
{
	args_t args;
	args.showDescription = false;
	args.schedule = typeid(Schedule).name();
	args.name = typeid(PowerReport).name();
	pelib_argument_stream_init(&args.lib);

	for(; arg[0] != NULL; arg++)
	{
		if(strcmp(arg[0], "--show-stats") == 0)
		{
			arg++;
			
			if(strcmp(arg[0], "--stdout") == 0)
			{
				args.showStatsOut = true;
			}
			else if(strcmp(arg[0], "--stderr") == 0)
			{
				args.showStatsErr = true;
			}
			else
			{
				args.showStatsFile = arg[0];
			}
			continue;
		}

		if(strcmp(arg[0], "--schedule") == 0)
		{
			arg++;
			args.schedule = string(arg[0] != NULL ? arg[0] : typeid(Schedule).name());
			continue;
		}

		if(strcmp(arg[0], "--id") == 0)
		{
			arg++;
			args.name = string(arg[0] != NULL ? arg[0] : typeid(PowerReport).name());
			continue;
		}

		if(strcmp(arg[0], "--description") == 0)
		{
			args.showDescription = true;
			continue;
		}

		// Nothing else, try to parse a library
		size_t offset = pelib_argument_stream_parse(arg, &args.lib);
		if(offset > 0)
		{
			// We need to backtrack as the loop increment will go to next argument
			arg += offset - 1;
		}
		else
		{
			// Force switching to next argument to avoid infinite loop
			fprintf(stderr, "Unknown argument: \"%s\". Perhaps missing curly braces around multiple words arguments? Skipping.\n", *arg);
			// No increment or backtrack here. Loop increment will get to next argument
		}
		
		continue;
	}

	return args;
}

// TODO: find a way to use libdl to invoke the library that created the object
char *library;

std::map<string, pelib::Record*>
pelib_process(const std::map<string, pelib::Record*> &records, size_t argc, char** argv)
{
	// Parse extra arguments and skip them
	args_t args = parse(argv);

	if(args.lib.library == NULL)
	{
		cerr << "[ERROR] No scheduler specified. Aborting" << endl;
		return map<string, Record*>();
	}

	if(args.lib.name == NULL)
	{
		args.lib.name = (char*)typeid(Schedule).name();
	}

	// Load library
	library = args.lib.library;
	void *libModel = load_lib(library);
	map<string, Record*> output;

	if(!args.showDescription)
	{
		PowerReport (*report)(const Schedule &schedule, size_t argc, char **argv, map<const string, double> &statistics) = (PowerReport (*)(const Schedule &tg, size_t argc, char **argv, map<const string, double> &statistics))load_function(libModel, "pelib_evaluate");

		// Read input data
		if(records.find(args.schedule) != records.end())
		{
			map<string, Record*>::const_iterator search_tg = records.find(args.schedule);
			if(search_tg == records.end())
			{
				throw PelibException("Missing schedule. Aborting");
			}	
			Schedule schedule(*(Schedule*)search_tg->second);

			// Prepare output collection and fill it with schedule generated by library
			map<const string, double> statistics;
			PowerReport power = report(schedule, args.lib.argc, args.lib.argv, statistics);
			//Schedule *sched = new Schedule("Dummy", "Dummy", Schedule::table());
			Schedule *schedule_copy = new Schedule(schedule);
			// Build algebra from power report
			output.insert(pair<string, Record*>(string(args.name), power.clone()));
			output.insert(pair<string, Record*>(args.schedule, schedule_copy));
			// TODO: delete schedule
			// Not copying them might not be enough as they have to be deleted by the library that created them, using libld

			for(const pair<string, Record*> &rec: records)
			{
				output.insert(pair<string, Record*>(rec.first, rec.second->clone()));
				// TODO: free originals
			}

			// Show solving statistics
			if(args.showStatsFile != NULL)
			{
				ofstream statsFileStr(args.showStatsFile);
				for(map<const string, double>::iterator i = statistics.begin(); i != statistics.end(); i++)
				{
					statsFileStr << i->first << " = " << i->second << endl;
				}
				statsFileStr.close();
			}
			else if(args.showStatsOut || args.showStatsErr)
			{
				for(map<const string, double>::iterator i = statistics.begin(); i != statistics.end(); i++)
				{
					if(args.showStatsOut)
					{
						cout << i->first << " = " << i->second << endl;
					}
					else
					{
						cerr << i->first << " = " << i->second << endl;
					}
				}
			}
		}
	}
	else
	{
		string (*description)(size_t argc, char **argv) = (string (*)(size_t argc, char **argv))load_function(libModel, "pelib_description");
		cout << description(args.lib.argc, args.lib.argv) << endl;
	}

	destroy_lib(libModel);

	return output;
}

void
pelib_delete_process(pelib::Record* obj)
{
	if(string(typeid(Algebra).name()).compare(typeid(*obj).name()) == 0)
	{
		// The algebra object was created in this class, then there is no need to call the library that generated the report
		// Just delete it regardless, so long it's an algebra
		delete obj;
	}
}

#ifdef __cplusplus
}
#endif

