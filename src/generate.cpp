/*
 Copyright 2015 Nicolas Melot

 This file is part of Pelib.

 Pelib is free software: you can redistribute it and/or modify
 it under the terms of the GNU General Public License as published by
 the Free Software Foundation, either version 3 of the License, or
 (at your option) any later version.

 Pelib is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 GNU General Public License for more details.

 You should have received a copy of the GNU General Public License
 along with Pelib. If not, see <http://www.gnu.org/licenses/>.
*/


#include <iostream>
#include <cstdlib>
#include <vector>
#include <map>

#include <pelib/Taskgraph.hpp>
#include <pelib/Platform.hpp>
#include <pelib/Record.hpp>

#include <pelib/process.h>
#include <pelib/argument_parsing.hpp>
#include <pelib/dl.h>

#ifdef debug
#undef debug
#endif

#define debug(expr) cerr << "[" << __FILE__ << ":" << __FUNCTION__ << ":" << __LINE__ << "] " << #expr << " = \"" << expr << "\"." << endl;

using namespace std;
using namespace pelib;

#ifdef __cplusplus
extern "C" {
#endif

struct args
{
	bool showDescription;
	string name;
	pelib_argument_stream lib;
};
typedef struct args args_t;

static
args_t
parse(char** arg)
{
	args_t args;
	args.showDescription = false;
	args.name = "";
	pelib_argument_stream_init(&args.lib);

	for(; arg[0] != NULL && string(arg[0]).compare("--") != 0; arg++)
	{
		if(strcmp(arg[0], "--description") == 0)
		{
			args.showDescription = true;
			continue;
		}

		if(strcmp(arg[0], "--name") == 0)
		{
			arg++;
			args.name = string(arg[0]);
			continue;
		}

		// Nothing else, try to parse a library
		arg += pelib_argument_stream_parse(arg, &args.lib) - 1;
		continue;
	}

	return args;
}

// TODO: find a way to use libdl to invoke the library that created the object
char *library;

std::map<string, pelib::Record*>
pelib_process(const std::map<string, pelib::Record*> &records, size_t argc, char** argv)
{
	// Parse extra arguments and skip them
	args_t args = parse(argv);

	if(args.lib.library == NULL)
	{
		cerr << "[ERROR] No generator specified. Aborting" << endl;
		return map<string, Record*>();
	}

	// Load library
	library = args.lib.library;
	void *libGenerator = load_lib(library);
	map<string, Record*> output;

	for(map<string, Record*>::const_iterator i = records.begin(); i != records.end(); i++)
	{
		output.insert(pair<string, Record*>(i->first, i->second->clone()));
	}

	if(!args.showDescription)
	{
		Record* (*generate)(size_t argc, char **argv) = (Record* (*)(size_t argc, char **argv))load_function(libGenerator, "pelib_generate");

		// Prepare output collection and fill it with schedule generated by library
		Record *rec = generate(args.lib.argc, args.lib.argv);
		output.insert(pair<string, Record*>(args.name.compare("") == 0 ? typeid(*rec).name() : args.name.c_str(), rec));
	}
	else
	{
		string (*description)(size_t argc, char **argv) = (string (*)(size_t argc, char **argv))load_function(libGenerator, "pelib_description");
		cout << description(args.lib.argc, args.lib.argv) << endl;
	}

	destroy_lib(libGenerator);

	return output;
}

void
pelib_delete(pelib::Record* obj)
{
	void *libGenerator = load_lib(library);
	void (*del)(const Record*) = (void (*)(const Record*))load_function(libGenerator, "pelib_delete");

	if(string(typeid(Record).name()).compare(typeid(*obj).name()) == 0)
	{
		del((Record*)obj);
	}
	else
	{
		delete obj;
	}
}

#ifdef __cplusplus
}
#endif

